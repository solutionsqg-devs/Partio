# Docker Compose para desarrollo de Partio
# Incluye API, PostgreSQL, Redis y Adminer para administraci贸n de BD

version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: partio-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: partio_dev
      POSTGRES_USER: partio
      POSTGRES_PASSWORD: partio123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - partio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U partio -d partio_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache y colas Redis
  redis:
    image: redis:7-alpine
    container_name: partio-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - partio-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # API de Partio
  api:
    build:
      context: ../../apps/api
      dockerfile: Dockerfile
      target: production
    container_name: partio-api
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_URL: postgresql://partio:partio123@postgres:5432/partio_dev?schema=public
      REDIS_URL: redis://:redis123@redis:6379
      JWT_SECRET: dev-jwt-secret-change-in-production
      JWT_EXPIRES_IN: 7d
      CORS_ORIGIN: http://localhost:3000,http://localhost:5173
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "4000:4000"
    volumes:
      - ../../apps/api:/app
      - /app/node_modules
      - api_logs:/app/logs
    networks:
      - partio-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Adminer para administraci贸n de base de datos
  adminer:
    image: adminer:4.8.1
    container_name: partio-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    networks:
      - partio-network
    depends_on:
      - postgres

  # Redis Commander para administraci贸n de Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: partio-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis123
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8081:8081"
    networks:
      - partio-network
    depends_on:
      - redis

  # Nginx para proxy reverso (opcional, para producci贸n)
  nginx:
    image: nginx:alpine
    container_name: partio-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    networks:
      - partio-network
    depends_on:
      - api
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  partio-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

// Prisma schema para Partio - SaaS de gastos compartidos
// Sigue principios de Clean Architecture con entidades bien definidas

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  groupMemberships GroupMember[]
  createdGroups    Group[]       @relation("GroupOwner")
  expenses         Expense[]     @relation("ExpenseCreator")
  expenseSplits    ExpenseSplit[]
  settlements      Settlement[]  @relation("SettlementPayer")
  receivedSettlements Settlement[] @relation("SettlementReceiver")

  @@map("users")
}

model Group {
  id           String   @id @default(cuid())
  name         String
  description  String?
  currency     String   @default("USD") // ISO 4217 currency code
  ownerId      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relaciones
  owner       User          @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     GroupMember[]
  expenses    Expense[]
  settlements Settlement[]

  @@map("groups")
}

model GroupMember {
  id       String            @id @default(cuid())
  groupId  String
  userId   String
  role     GroupMemberRole   @default(MEMBER)
  status   GroupMemberStatus @default(ACTIVE)
  joinedAt DateTime          @default(now())

  // Relaciones
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model Expense {
  id          String      @id @default(cuid())
  groupId     String
  creatorId   String
  title       String
  description String?
  amount      Decimal     @db.Decimal(10, 2)
  currency    String      @default("USD")
  category    String?
  date        DateTime    @default(now())
  status      ExpenseStatus @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relaciones
  group     Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator   User           @relation("ExpenseCreator", fields: [creatorId], references: [id])
  splits    ExpenseSplit[]
  receipts  Receipt[]

  @@map("expenses")
}

model ExpenseSplit {
  id        String     @id @default(cuid())
  expenseId String
  userId    String
  amount    Decimal    @db.Decimal(10, 2)
  type      SplitType  @default(EQUAL)
  createdAt DateTime   @default(now())

  // Relaciones
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
  @@map("expense_splits")
}

model Receipt {
  id        String   @id @default(cuid())
  expenseId String
  filename  String
  url       String
  mimeType  String
  size      Int
  createdAt DateTime @default(now())

  // Relaciones
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@map("receipts")
}

model Settlement {
  id         String           @id @default(cuid())
  groupId    String
  payerId    String
  receiverId String
  amount     Decimal          @db.Decimal(10, 2)
  currency   String           @default("USD")
  status     SettlementStatus @default(PENDING)
  settledAt  DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relaciones
  group    Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  payer    User  @relation("SettlementPayer", fields: [payerId], references: [id])
  receiver User  @relation("SettlementReceiver", fields: [receiverId], references: [id])

  @@map("settlements")
}

model CurrencyRate {
  id        String   @id @default(cuid())
  fromCurrency String
  toCurrency   String
  rate      Decimal  @db.Decimal(10, 6)
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  @@unique([fromCurrency, toCurrency, date])
  @@map("currency_rates")
}

// Enums
enum GroupMemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum GroupMemberStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum ExpenseStatus {
  ACTIVE
  DELETED
}

enum SplitType {
  EQUAL
  EXACT
  PERCENTAGE
}

enum SettlementStatus {
  PENDING
  COMPLETED
  CANCELLED
}
